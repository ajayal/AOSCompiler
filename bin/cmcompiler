#!/usr/bin/env python

######################################################################
#
#   CMCompiler is free software. It comes without any warranty, to
#   the extent permitted by applicable law. You can redistribute it
#   and/or modify it under the terms of the Do What The Fuck You Want
#   To Public License, Version 2, as published by Sam Hocevar. See
#   http://sam.zoy.org/wtfpl/COPYING for more details.
#
######################################################################

######################################################################
# Python imports
######################################################################
import pygtk
pygtk.require('2.0')
import gtk
import os
import ConfigParser
import urllib, urllib2
import re
import platform
import sys
import commands
import vte
import webbrowser
from glob import glob

######################################################################
# Resources
######################################################################
myIMGS = "/usr/share/cmcompiler/images"
myICON = "%s/cmc-icon.png" % myIMGS
myMAINIMG = "%s/Main.png" % myIMGS
myADVIMG = "%s/ADV.png" % myIMGS
myTHEME = "%s/theme/" % myIMGS
mySCRIPTS = "/usr/share/cmcompiler/scripts"
mySYNC_SCRIPT = "%s/sync_script.sh" % mySCRIPTS
myCOMPILE_SCRIPT = "%s/compile_script.sh" % mySCRIPTS
myROOMSERVICE_SCRIPT = "%s/roomservice_script.sh" % mySCRIPTS

######################################################################
# Local config junk
######################################################################
myHOME = os.environ['HOME']
myGIT_CONF = "%s/.gitconfig" % (myHOME)
myCONF_DIR = "%s/.cmcompiler" % (myHOME)
myCONF = "%s/cmcompiler.cfg" % (myCONF_DIR)
myCONFIRM = "%s/ask.confim" % (myCONF_DIR)
myREPO_CONF = "%s/repo_list" % (myCONF_DIR)
myDEF_REPO_PATH = "%s/build" % (myCONF_DIR)
myCONF_DEVICE_NAME = "config_device_name:"
myCONF_CUST_REPO_PATH = "config_custom_repo_path:"
myCONF_BRANCH = "config_branch:"
askConfirm = "%s/ask.confim" % (myCONF_DIR)

######################################################################
# Needed web urls
######################################################################
myFORUM_URL = "http://forum.xda-developers.com/showthread.php?t=1415661"
myDONATE = "http://forum.xda-developers.com/donatetome.php?u=2709018"
myCM_URL = "https://github.com/CyanogenMod"
myCM_RAW_URL = "https://raw.github.com/CyanogenMod"
myCM_JB_URL = "%s/android_vendor_cm/jellybean/vendorsetup.sh" % myCM_RAW_URL
myCM_ICS_URL = "%s/android_vendor_cm/ics/vendorsetup.sh" % myCM_RAW_URL
myCM_GB_URL = "%s/android_vendor_cyanogen/gingerbread/vendorsetup.sh" % myCM_RAW_URL
myINIT_URL = "https://github.com/CyanogenMod/android.git"
myREPO_TOOL_URL = "https://dl-ssl.google.com/dl/googlesource/git-repo/repo"
myGETCM = "http://get.cm"
myCMWIKI = "http://wiki.cyanogenmod.com"
myAOSP_SITE = "http://source.android.com"

########################################################################
# Text blobs
########################################################################
ask_confirm_info = "<small>By no means what so ever is this software or cyanogenmod responsible for what you do to your phone. \
You are taking the risks, you are choosing to this to your phone. By proceeding you are aware, you are warned. No crying or moaning. This software \
was tested by human beings, not cybogs from your mothers closet. Please keep this in mind when something breaks, or hangs.  If you have an issue \
with this software, please let me know.\n\nBy clicking this ok button, you have given me your soul.\n\nPlay safe.\n\n</small>\
<small><small><b>Note:\n- </b><i>This will not proceed unless you agree.</i></small>\n\
<small><b>-</b><i> Cyanogenmod doesn't consider source builds offical, please keep this in mind if you plan on bug reporting.</i></small></small>\n\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n"
about_info = "The cyanogenmod compiler was written, not to dismiss the need\
 to learn the android system, but to release the need consistly remember menial tasks.\n\n\
 Please intend to learn the system, contribute back to any upstream.\n\n\
 Happy compiling,\n\nCode: Jeremie Long\nGraphics: SavocaFTW\n\n\
 Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n"
device_info = "<b>Device Configuration:</b>\n\
Here is where we will configure your device. Your device is pulled from\n\
the internet, from the CM9 repo. You must first have your branch set before\n\
you will be able to set your device.\n\n\
At this point, each device must be an Officially supported CM device for this\n\
to work. There will be an option to add unofficial devices at a later date.\n\
If you are having issues with adding your device, or don't know the name of\n\
the board, please try a quick google search. You can also read your build.prop\n\
to find the name. Usually its located at:\n\n\
<b>/system/build.prop</b>\n\n\
Please press the device button to add your device\n\n \
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n"
branch_info = "<b>Branch Configuration:</b>\n\
In a nutshell, a branch could be a snapshot of work done and has sense moved\n\
on. This would be a stable branch. There are also development branches, these \n\
branches are not stable and shouldn't be thought of as such. Both branches that \n\
are available here are development branches. Please keep this in mind when \n\
choosing to run this compiler.\n\n\
Branches info:\n\n\
<b>jellybean</b> = This is the CM10 branch of CM based off of jellybean\n\n\
<b>ics</b> = This branch is the current development branch from CM9. Use with caution.\n\n\
<b>gingerbread</b> = is the current development branch for CM7. This branch tends to \n\
be more stable then the CM9/ics branch.\n\n\
Good read on braches and merging can be found <a href=\"http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging\">here</a>.\n\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n"
repo_info = "<b>Repo Configuration:</b>\n\
The Cyanogenmod repo is the entire source of projects needed to build\n\
Cyanogenmod. Using the repo command you download back a few, will\n\
download the source. You can choose where to place these source files.\n\n\
By default the repo is downloaded to:\n\
<b>%s</b>\n\n\
If you would like to use that path, do not change this setting. If you would\n\
like to change this path, or you already have the source downloaded, please\n\
use the button below to choose the path that you would like this to be.\n\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n" % myDEF_REPO_PATH
sync_info = "<b>Sync Configuration and setup:</b>\n\
This is where you will initialize the cm repo, then sync it. There will be 2 commands\n\
for each of these that will need to be ran. The init command is only ran once during\n\
the setup of this and that is all. The sync command would be used every time you\n\
wanted to sync up with the latest source code. You can change how many jobs you\n\
want to use at the very bottom of this page, by default the sync jobs are 4.\n\n\
Init:\n\
   Ice Cream Sandwhich:\n\
   <b>repo init -u %s -b ics</b>\n\n\
   Gingerbread\n\
   <b>repo init -u %s -b gingerbread</b>\n\n\
Sync:\n\
   <b>repo sync -j4</b>\n\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n" % (myCM_URL, myCM_URL)
compile_info = "<b>Compile Configuration:</b>\n\
Compiling is the final step in building Cyanogenmod. Here we simply have to run\n\
a few commands since we already configured everything else. I will list those\n\
commands and try my very best to explain them as easy as possible.\n\n\
If you are using CM9 then you device will not be in the repo by default. It is\n\
simple to add though. Just go into your repo path and run the following command:\n\
<b>python build/tools/roomservice.py cm_your_device_here</b>\n\n\
Once you have your device you will want to <b>go into the device directory</b> and\n\
extract the needed blobs from your phone, to run that command:\n\
<b>./extract-files.sh</b>\n\n\
Now we run a command to setup local enviroment variables:\n\
<b>source build/envsetup.sh</b>\n\n\
Then simply start the build for CM:\n\
<b>brunch your_device_here</b>\n\n\
<small>If you are running CM9 you might want to setup ccache, its simple and painless <a href=\"http://source.android.com/source/building.html#using-ccache\">here</a></small>\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>"
package_info = "<b>Packages:</b>\n\
Packages are needed to download/sync/compiler cyanogenmod. Packages will\n\
differ from distro to disto and even Ubuntu version to the next. Please\n\
Check out the <a href=\"http://wiki.cyanogenmod.com\">cyanogenmod wiki</a>, <a href=\"http://source.android.com/source/initializing.html#installing-required-packages-ubuntu-1004-1110\">google source</a>, and other websites for the\n\
packages that are needed for your distro.\n\n\
Without these packages your sync/compile <b>WILL</b> break, please follow\n\n\
all the directions when installing packages for your distro.\n\n\
Also, while installing packages you will need to install the repo script\n\
you can type out the commands below to install the script or go <a href=\"http://source.android.com/source/downloading.html\">here</a>\n\n\
   <b>curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/repo\n\
   chmod a+x ~/repo\n\
   sudo mv ~/repo /usr/local/bin/</b>\n\n\
Any bugs? Please report them <a href=\"mailto:https://github.com/lithid/Cmcompiler/issues\">here</a>.\n"

######################################################################
# Meh
######################################################################
myBUILD_SCRIPT = "/usr/share/cmcompiler/prog/scripts/build-it.sh"
myDEF_BRANCH = "ics"
dl_version = None
dl_url = None
dl_device = None
mylist = []

######################################################################
# About
######################################################################
class about():

        def main(self):
                dialog = gtk.AboutDialog()
                dialog.set_name("CMC")
                dialog.set_version("0.5 Beta")
                dialog.set_comments(about_info)
                dialog.set_copyright("CMC - 2012")
                dialog.set_website_label("Donate")
                dialog.set_website(myDONATE)
                dialog.run()
                dialog.destroy()

######################################################################
# Helper functions
######################################################################
numprocs = [ int(line.strip()[-1]) for line in open('/proc/cpuinfo', 'r') if line.startswith('processor') ][-1] + 1

def openBuildFolder():
     t = "%s/out/target/product/%s" % (repo_path, build_device)
     cmd = "nautilus %s" % (t)
     os.system(cmd)
     sys.exit()

def openFolder(obj):
	t = "%s/Downloads" % (u_home)
	cmd = "nautilus %s" % (t)
	os.system(cmd)
	gtk.main_quit()

def custom_listdir(path):
    dirs = sorted([d for d in os.listdir(path) if os.path.isdir(path + os.path.sep + d)])
    dirs.extend(sorted([f for f in os.listdir(path) if os.path.isfile(path + os.path.sep + f)]))

    return dirs

def install_repo():
	cmd1 = "curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > %s/repo" % (configdir)
	cmd2 = "chmod a+x %s/repo" % (configdir)
	cmd3 = "gksudo mv %s/repo /usr/local/bin/" % (configdir)
	os.system(cmd1)
	os.system(cmd2)
	os.system(cmd3)

def which(program):
	def is_exe(fpath):
		return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

	fpath, fname = os.path.split(program)
	if fpath:
		if is_exe(program):
			return program
	else:
		for path in os.environ["PATH"].split(os.pathsep):
			exe_file = os.path.join(path, program)
			if is_exe(exe_file):
				return exe_file

	return None

def custom_dialog(dialog_type, title, message):
    dialog = gtk.MessageDialog(None,
                               gtk.DIALOG_MODAL,
                               type=dialog_type,
                               buttons=gtk.BUTTONS_OK)
    dialog.set_markup("<b>%s</b>" % title)
    dialog.format_secondary_markup(message)
    dialog.run()
    dialog.destroy()
    return True

def question_dialog(title, message):
    dialog = gtk.MessageDialog(None,
                               gtk.DIALOG_MODAL,
                               type=gtk.MESSAGE_QUESTION,
                               buttons=gtk.BUTTONS_YES_NO)
    dialog.set_markup("<b>%s</b>" % title)
    dialog.format_secondary_markup(message)
    response = dialog.run()
    dialog.destroy()

    if response == gtk.RESPONSE_YES:
       return True
    else:
       return False

def chk_config():
	if not os.path.exists(myCONF_DIR):
		os.makedirs(myCONF_DIR)

def getManu(arg, br):
	s = None
	if br == "gb":
		paths = glob("device/*/*/device.mk")
	elif br == "ics" or br == "jellybean":
		paths = glob("device/*/*/cm.mk")
	else:
		paths = None

	if paths is not None:
		for x in paths:
			if arg in x:
				s = x.split("/")
				s = s[1]
	if s:
		return s
	else:
		return None

def get_askConfirm():
	def askedClicked():
		if not os.path.exists(askConfirm):
			file(askConfirm, 'w').close()

	dialog = gtk.MessageDialog(None, gtk.DIALOG_MODAL, type=gtk.MESSAGE_INFO, buttons=gtk.BUTTONS_OK)
	dialog.set_title("**** User Confirmation ****")
	dialog.set_markup("<small>This is what <b>YOU</b> do to <b>YOUR</b> phone.</small>")
	dialog.format_secondary_markup(ask_confirm_info)
	dialog.set_resizable(False)

	r = dialog.run()
	if r == gtk.RESPONSE_OK:
		askedClicked()
	else:
		exit()
	dialog.destroy()

def read_parser(arg):
	title = "Cmc"
	default = "Default"
	try:
		config = ConfigParser.RawConfigParser()
		config.read(myCONF)
		c = config.get(title, arg)

	except ConfigParser.NoSectionError:
		c = "%s" % (default)

	return c

def parser(arg, value):
	title = "Cmc"
	default = "Default"
	try:
		config = ConfigParser.RawConfigParser()
		config.read(myCONF)
		getDevice = config.get(title, 'device')
		getBranch = config.get(title, 'branch')
		getRepoPath = config.get(title, 'repo_path')
		getMainGuiToggle = config.get(title, 'main_gui_toggle')
		getSyncJobs = config.get(title, 'sync_jobs')
		getMakeJobs = config.get(title, 'make_jobs')
		getManuf = config.get(title, 'manuf')

	except ConfigParser.NoSectionError:
		getDevice = None
		getBranch = None
		getRepoPath = None
		getMainGuiToggle = None
		getSyncJobs = None
		getMakeJobs = None
		getManuf = None

	config = ConfigParser.RawConfigParser()
	config.add_section(title)

	if arg == "device":
		config.set(title, 'device', value)
	elif getDevice:
		config.set(title, 'device', getDevice)
	else:
		config.set(title, 'device', default)

	if arg == "branch":
		config.set(title, 'branch', value)
	elif getBranch:
		config.set(title, 'branch', getBranch)
	else:
		config.set(title, 'branch', default)

	if arg == "repo_path":
		config.set(title, 'repo_path', value)
	elif getRepoPath:
		config.set(title, 'repo_path', getRepoPath)
	else:
		config.set(title, 'repo_path', myDEF_REPO_PATH)
		
	if arg == "main_gui_toggle":
		config.set(title, 'main_gui_toggle', value)
	elif getMainGuiToggle:
		config.set(title, 'main_gui_toggle', getMainGuiToggle)
	else:
		config.set(title, 'main_gui_toggle', default)
		
	if arg == "sync_jobs":
		config.set(title, 'sync_jobs', value)
	elif getSyncJobs:
		config.set(title, 'sync_jobs', getSyncJobs)
	else:
		config.set(title, 'sync_jobs', "4")
		
	if arg == "make_jobs":
		config.set(title, 'make_jobs', value)
	elif getMakeJobs:
		config.set(title, 'make_jobs', getMakeJobs)
	else:
		config.set(title, 'make_jobs', numprocs)
		
	if arg == "manuf":
		config.set(title, 'manuf', value)
	elif getManuf:
		config.set(title, 'manuf', getManuf)
	else:
		config.set(title, 'manuf', default)

	with open(myCONF, 'wb') as configfile:
    		config.write(configfile)
    		
def main_gui_toggle_checked(obj):
        c = read_parser("main_gui_toggle")
        if c == "Default":
                parser("main_gui_toggle", "Advanced")
                MAIN_GUI_TOGGLE.set_label("Advanced mode (is set)")
        elif c == "Advanced":
                parser("main_gui_toggle", "Default")
                MAIN_GUI_TOGGLE.set_label("Advanced mode (is not set)")
        else:
                parser("main_gui_toggle", "Default")
                MAIN_GUI_TOGGLE.set_label("Advanced mode (is not set)")
                
def download_clicked(obj):
        webbrowser.open_new_tab(myGETCM)
        
def cm_wiki_clicked(obj):
        webbrowser.open_new_tab(myCMWIKI)
        
def aosp_site_clicked(obj):
        webbrowser.open_new_tab(myAOSP_SITE)

def main_about(obj):
        about().main()
		
def sync_button_clicked(obj):
        vteterminal("Syncing")

def compile_button_clicked(obj):
        vteterminal("Compiling")
    		
######################################################################
# Some GTK globals
######################################################################
MAIN_APP_WIN = gtk.Window(gtk.WINDOW_TOPLEVEL)
MAIN_ADVANCED_WIN = gtk.Window(gtk.WINDOW_TOPLEVEL)
PAGES = gtk.Notebook()
PREV_BUTTON = gtk.Button()
NEXT_BUTTON = gtk.Button()
myMAIN_ICON = gtk.gdk.pixbuf_new_from_file(myICON)

# Create File Menu
FILE_MENU_BAR = gtk.Menu()

MAIN_FILE_MENU = gtk.MenuItem("File")
MAIN_FILE_MENU.set_submenu(FILE_MENU_BAR)

MAIN_GUI_TOGGLE = gtk.CheckMenuItem()
c = read_parser("main_gui_toggle")
if c == "Default":
        MAIN_GUI_TOGGLE.set_label("Advanced mode (not set)")
        MAIN_GUI_TOGGLE.set_active(False)
else:
        MAIN_GUI_TOGGLE.set_label("Advanced mode (is set)")
        MAIN_GUI_TOGGLE.set_active(True)
MAIN_GUI_TOGGLE.connect("toggled", main_gui_toggle_checked)
FILE_MENU_BAR.append(MAIN_GUI_TOGGLE)
MAIN_GUI_TOGGLE.show()

MENU_DOWNLOAD_BUTTON = gtk.MenuItem("Download")
MENU_DOWNLOAD_BUTTON.connect("activate", download_clicked)
FILE_MENU_BAR.append(MENU_DOWNLOAD_BUTTON)
MENU_DOWNLOAD_BUTTON.show()

MENU_SYNC_BUTTON = gtk.MenuItem("Sync")
FILE_MENU_BAR.append(MENU_SYNC_BUTTON)
MENU_SYNC_BUTTON.show()

MENU_COMPILE_BUTTON = gtk.MenuItem("Compile")
FILE_MENU_BAR.append(MENU_COMPILE_BUTTON)
MENU_COMPILE_BUTTON.show()

MENU_GERRIT_BUTTON = gtk.MenuItem("Gerrit")
FILE_MENU_BAR.append(MENU_GERRIT_BUTTON)
MENU_GERRIT_BUTTON.show()

MENU_CLOSE_BUTTON = gtk.MenuItem("Close")
FILE_MENU_BAR.append(MENU_CLOSE_BUTTON)
MENU_CLOSE_BUTTON.show()

# Create help menu
MAIN_HELP_MENU = gtk.Menu()

MENU_HELP_BUTTON = gtk.MenuItem("Help")
MENU_HELP_BUTTON.set_submenu(MAIN_HELP_MENU)

MENU_CMWIKI_BUTTON = gtk.MenuItem("CM Wiki")
MENU_CMWIKI_BUTTON.connect("activate", cm_wiki_clicked)
MAIN_HELP_MENU.append(MENU_CMWIKI_BUTTON)
MENU_CMWIKI_BUTTON.show()

MENU_AOSP_SITE_BUTTON = gtk.MenuItem("Aosp site")
MENU_AOSP_SITE_BUTTON.connect("activate", aosp_site_clicked)
MAIN_HELP_MENU.append(MENU_AOSP_SITE_BUTTON)
MENU_AOSP_SITE_BUTTON.show()

MENU_ABOUT_BUTTON = gtk.MenuItem("About")
MAIN_HELP_MENU.append(MENU_ABOUT_BUTTON)
MENU_ABOUT_BUTTON.show()

# Main menu bar
MAIN_MENU_BAR = gtk.MenuBar()
MAIN_MENU_BAR.show()
MAIN_MENU_BAR.append(MAIN_FILE_MENU)
MAIN_MENU_BAR.append(MENU_HELP_BUTTON)

COMPILE_ADJ = gtk.Adjustment(0, 0, numprocs, 1, 10, 0)
COMPILE_SCALE = gtk.HScale(COMPILE_ADJ)
SYNC_ADJ = gtk.Adjustment(0, 0, 16, 2, 10, 0)
SYNC_SCALE = gtk.HScale(SYNC_ADJ)

#####################################################################
# VTE Terminal
#####################################################################
def vteterminal(arg):
        dialog = gtk.Dialog("Cmcompiler Terminal: %s" % arg, None, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
        dialog.set_position(gtk.WIN_POS_CENTER_ALWAYS)
        dialog.set_icon(myMAIN_ICON)
        TERM_FRAME = gtk.Frame()
        TERM_FRAME.set_size_request(750, 500)
        TERM_FRAME.show()
        TERM = vte.Terminal()
        if arg == "Syncing":
                TERM.fork_command(mySYNC_SCRIPT)
        elif arg == "Compiling":
                p = read_parser("repo_path")
                d = read_parser("device")
                b = read_parser("branch")
                if p == "Default":
                        p = myDEF_REPO_PATH
                os.chdir(p)
                m = getManu(d, b)
                if m == None:
                        TERM.fork_command(myROOMSERVICE_SCRIPT)
                m = getManu(d, b)
                parser("manuf", m)
                TERM.fork_command(myCOMPILE_SCRIPT)
        else:
                TERM.fork_command(myNONE_SCRIPT)
        TERM.show()
        TERM_FRAME.add(TERM)
        dialog.vbox.pack_start(TERM_FRAME, False, False, 0)
        dialog.run()
	dialog.destroy()

######################################################################
# Global Settings
######################################################################
def compile_scale_moved(event):
        value = str(COMPILE_SCALE.get_value())
        value = value.split(".")
        value = value[0]
        parser("make_jobs", value)
        
def sync_scale_moved(event):
        value = str(SYNC_SCALE.get_value())
        value = value.split(".")
        value = value[0]
        parser("sync_jobs", value)
        
def callback_device(widget, data=None):
	print "%s was toggled %s" % (data, ("OFF", "ON")[widget.get_active()])
	parser("device", data)

def callback_branch(widget, data=None):
	print "%s was toggled %s" % (data, ("OFF", "ON")[widget.get_active()])
	parser("branch", data)

def choose_branch(obj):
	dialog = gtk.Dialog("Choose branch", None, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
	dialog.set_size_request(260, 200)
	dialog.set_resizable(False)

	scroll = gtk.ScrolledWindow()
	scroll.set_border_width(10)
	scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_ALWAYS)
	dialog.vbox.pack_start(scroll, True, True, 0)
	scroll.show()

	table = gtk.Table(2, 1, False)
	table.set_row_spacings(45)

	scroll.add_with_viewport(table)
	table.show()

	device = gtk.RadioButton(None, None)

	button_count = 0
	for radio in list(["ics", "gingerbread", "jellybean"]):

		button_count += 1
		button = "button%s" % (button_count)

		button = gtk.RadioButton(group=device, label="%s" % (radio))
		button.connect("toggled", callback_branch, "%s" % (radio))
		table.attach(button, 0, 1, 0, button_count, xoptions=gtk.FILL, yoptions=gtk.SHRINK)
		button.show()

	dialog.run()
	dialog.destroy()

def choose_repo_path(obj):
	direct = gtk.FileChooserDialog("Repo path...", action=gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER, buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
	r = direct.run()
	repo_dir = direct.get_filename()
	direct.destroy()
	if r == gtk.RESPONSE_ACCEPT:
		try:
			parser("repo_path", repo_dir)
		except NameError:
			pass

def remove_config(obj):
	q = question_dialog("Remove config?", "Are you sure you want to remove your current config?\n\nOnce this is done it can't be undone.")
	if q == True:
		os.remove(cmcconfig)
		custom_dialog(gtk.MESSAGE_INFO, "Configuration removed", "Your configuration has been removed. Please restart the application to re-configure.")

def view_config(obj):

	dialog = gtk.Dialog("Cmc configuration", None, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
	dialog.set_size_request(500, 400)
	dialog.set_resizable(False)

	sw = gtk.ScrolledWindow()
	sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
	textview = gtk.TextView()
	textbuffer = textview.get_buffer()
	sw.add(textview)
	sw.show()
	textview.show()

	dialog.vbox.pack_start(sw, True, True, 0)

	try:
		infile = open(myCONF, "r")
		string = infile.read()
		infile.close()
		textbuffer.set_text(string)
	except IOError:
		custom_dialog(gtk.MESSAGE_ERROR, "Failed reading configuration", "Can't currently read the config file.\n\nIs it open somewhere else?\n\nPlease try again.")

	dialog.run()
	dialog.destroy()

def viewgit_config(obj):

	def btn(obj):
		custom_dialog(gtk.MESSAGE_INFO, "Configuration removed", "Your configuration has been removed. Please restart the application to re-configure.")

	dialog = gtk.Dialog("Cmc git configuration", None, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
	dialog.set_size_request(500, 400)
	dialog.set_resizable(False)

	sw = gtk.ScrolledWindow()
	sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
	textview = gtk.TextView()
	textbuffer = textview.get_buffer()
	sw.add(textview)
	sw.show()
	textview.show()

	dialog.vbox.pack_start(sw, True, True, 0)

	try:
		infile = open(myGIT_CONF, "r")
		string = infile.read()
		infile.close()
		textbuffer.set_text(string)
	except IOError:
		custom_dialog(gtk.MESSAGE_ERROR, "Failed reading configuration", "Can't currently read the config file.\n\nIs it open somewhere else?\n\nPlease try again.")

	dialog.run()
	dialog.destroy()

def device_list(obj):
	b = read_parser("branch")
	if "Default" in b:
		custom_dialog(gtk.MESSAGE_ERROR, "No branch choosen", "Please select a branch so I know which device list to pull.\n\nThanks!")
		chk_config = 0
	elif "gingerbread" in b:
		useBranch = myCM_GB_URL
		chk_config = 1
	elif "ics" in b:
		useBranch = myCM_ICS_URL
		chk_config = 1
	elif "jellybean" in b:
		useBranch = myCM_JB_URL
		chk_config = 1
	else:
		useBranch = "null"
		chk_config = 0

	if chk_config == True:
		try:
			filehandle = urllib.urlopen(useBranch)
		except IOError:
			custom_dialog(gtk.MESSAGE_ERROR, "Can't read file!", "Can't read the file to setup devices!\n\nPlease check you internet connections and try again!")

		count = 0
		for lines in filehandle.readlines():
			count += 1

		filehandle.close()

		dialog = gtk.Dialog("Choose device", None, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT, gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
		dialog.set_size_request(260, 400)
		dialog.set_resizable(False)

		scroll = gtk.ScrolledWindow()
		scroll.set_border_width(10)
		scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_ALWAYS)
		dialog.vbox.pack_start(scroll, True, True, 0)
		scroll.show()

		table = gtk.Table(count, 1, False)
		table.set_row_spacings(5)

		scroll.add_with_viewport(table)
		table.show()

		device = gtk.RadioButton(None, None)

		try:
			filehandle = urllib.urlopen(useBranch)
		except IOError:
			custom_dialog(gtk.MESSAGE_ERROR, "Can't read file!", "Can't read the file to setup devices!\n\nPlease check you internet connections and try again!")

		button_count = 0
		for lines in filehandle.readlines():

			if "combo" in lines:
				button_count += 1
				button = "button%s" % (button_count)

				x = lines.split(" ")
				radio = x[1]
				x = radio.split("_")
				radio = x[1]
				x = radio.split("-")
				radio = x[0]

				button = gtk.RadioButton(group=device, label="%s" % (radio))
				button.connect("toggled", callback_device, "%s" % (radio))
				table.attach(button, 0, 1, button_count-1, button_count, xoptions=gtk.FILL, yoptions=gtk.SHRINK)
				button.show()

		filehandle.close()

		dialog.run()
		dialog.destroy()

######################################################################
# Advanced
######################################################################
class advanced():
 
	def main_quit(self, widget, event=None):
		gtk.main_quit()
 
	# Main program
	def main(self):

		MAIN_ADVANCED_WIN.set_title("Cyanogenmod Compiler")
		MAIN_ADVANCED_WIN.set_position(gtk.WIN_POS_CENTER_ALWAYS)
		MAIN_ADVANCED_WIN.set_icon(myMAIN_ICON)
        	MAIN_ADVANCED_WIN.connect("delete_event", self.main_quit)
        	MAIN_ADVANCED_WIN.set_border_width(10)

		MAIN_ADVANCED_VBOX = gtk.VBox(False, 0)
		MAIN_ADVANCED_VBOX.pack_start(MAIN_MENU_BAR, False, False, 0)

		settings_lab = gtk.Label("Configure your settings here")
		settings_lab.show()
		MAIN_ADVANCED_VBOX.pack_start(settings_lab, False, False, 10)
		
        	ADV_IMAGE = gtk.Image()
        	ADV_IMAGE.set_from_file(myADVIMG)
        	ADV_FRAME = gtk.Frame()
        	ADV_FRAME.show()

		ADV_EVENT = gtk.EventBox()
		ADV_EVENT.add(ADV_IMAGE)
        	ADV_FRAME.add(ADV_EVENT)
		ADV_EVENT.show()
        	MAIN_ADVANCED_VBOX.pack_start(ADV_FRAME, False, False, 0)

		table = gtk.Table(6, 2, False)
		table.set_row_spacings(5)
		table.show()

		MAIN_ADVANCED_VBOX.pack_start(table, True, True, 15)

		device_btn = gtk.Button("Choose device")
		device_btn.set_size_request(140, 28)
		device_btn.connect("clicked", device_list)
		device_btn.show()

		branch_btn = gtk.Button("Choose branch")
		branch_btn.set_size_request(140, 28)
		branch_btn.connect("clicked", choose_branch)
		branch_btn.show()

		repo_path_btn = gtk.Button("Choose repo path")
		repo_path_btn.set_size_request(140, 28)
		repo_path_btn.connect("clicked", choose_repo_path)
		repo_path_btn.show()

		viewgit_btn = gtk.Button("View git config")
		viewgit_btn.set_size_request(140, 28)
		viewgit_btn.connect("clicked", viewgit_config)
		viewgit_btn.show()

		view_btn = gtk.Button("View config")
		view_btn.set_size_request(140, 28)
		view_btn.connect("clicked", view_config)
		view_btn.show()

		config_btn = gtk.Button("Remove config")
		config_btn.set_size_request(140, 28)
		config_btn.connect("clicked", remove_config)
		config_btn.show()

		table.attach(device_btn, 0, 1, 0, 1, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)
		table.attach(branch_btn, 1, 2, 0, 1, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)
		table.attach(repo_path_btn, 0, 1, 1, 2, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)
		table.attach(viewgit_btn, 1, 2, 1, 2, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)
		table.attach(view_btn, 0, 1, 2, 3, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)
		table.attach(config_btn, 1, 2, 2, 3, xoptions=gtk.EXPAND, yoptions=gtk.EXPAND)

		
		SYNC_SCALE_LABEL = gtk.Label()
		SYNC_SCALE_LABEL.set_markup("How many <b>sync</b> jobs, Default = 4")
		SYNC_SCALE_LABEL.show()
		s = int(read_parser("sync_jobs"))
		SYNC_SCALE.set_digits(0)
		SYNC_SCALE.set_value_pos(s)
		SYNC_SCALE.set_update_policy(gtk.UPDATE_DISCONTINUOUS)
		SYNC_SCALE.connect("value-changed", sync_scale_moved)
		SYNC_SCALE.show()
		
		COMPILE_SCALE_LABEL = gtk.Label()
		COMPILE_SCALE_LABEL.set_markup("How many <b>make</b> jobs, Default = %s" % numprocs)
		COMPILE_SCALE_LABEL.show()
		m = int(read_parser("make_jobs"))
		COMPILE_SCALE.set_digits(0)
		COMPILE_SCALE.set_value_pos(m)
		COMPILE_SCALE.set_update_policy(gtk.UPDATE_DISCONTINUOUS)
		COMPILE_SCALE.connect("value-changed", compile_scale_moved)
		COMPILE_SCALE.show()
		
		MAIN_ADVANCED_VBOX.pack_start(SYNC_SCALE_LABEL, False, False, 0)
		MAIN_ADVANCED_VBOX.pack_start(SYNC_SCALE, False, False, 0)
		MAIN_ADVANCED_VBOX.pack_start(COMPILE_SCALE_LABEL, False, False, 0)
		MAIN_ADVANCED_VBOX.pack_start(COMPILE_SCALE, False, False, 0)

                MENU_SYNC_BUTTON.connect("activate", sync_button_clicked)
                MENU_COMPILE_BUTTON.connect("activate", compile_button_clicked)
		MENU_CLOSE_BUTTON.connect("activate",  self.main_quit)
		MENU_ABOUT_BUTTON.connect("activate", main_about)

		b = read_parser("branch")
		d = read_parser("device")
		r = read_parser("repo_path")
		if r == "Default":
			r = myDEF_REPO_PATH
		settings_info = gtk.Label()
		settings_info.set_alignment(0, 0)
		settings_info.set_markup("<small><small>Device: <b>%s</b>\nBranch: <b>%s</b>.\nRepo path: <b>%s</b></small></small>" % (d,b,r))
		settings_info.show()
		MAIN_ADVANCED_VBOX.pack_start(settings_info, False, False, 5)

		MAIN_ADVANCED_WIN.add(MAIN_ADVANCED_VBOX)
        	MAIN_ADVANCED_WIN.show_all()
		gtk.main()

######################################################################
# Main program
######################################################################
class walkthrough():

	def next_callback(self, widget):
		PAGES.next_page()
		current = PAGES.get_current_page()
		if current == 0:
			PREV_BUTTON.set_sensitive(False)
		else:
			PREV_BUTTON.set_sensitive(True)
			PREV_BUTTON.set_label("Previous")
			NEXT_BUTTON.set_label("Next")

		if current == 6:
			NEXT_BUTTON.set_sensitive(False)
			NEXT_BUTTON.set_label("Press previous to go back")
		else:
			NEXT_BUTTON.set_sensitive(True)
			NEXT_BUTTON.set_label("Next")	

	def prev_callback(self, widget):
		PAGES.prev_page()
		current = PAGES.get_current_page()
		if current == 0:
			NEXT_BUTTON.set_label("Start")
			PREV_BUTTON.set_label("Click start to begin")
			PREV_BUTTON.set_sensitive(False)
		else:
			NEXT_BUTTON.set_sensitive(True)
			NEXT_BUTTON.set_label("Next")
			PREV_BUTTON.set_sensitive(True)
			PREV_BUTTON.set_label("Previous")

	def main_quit(self, widget, event=None):
		gtk.main_quit()
		return False

	def __init__(self):

		MAIN_APP_WIN.set_title("Cyanogenmod Compiler")
                MAIN_APP_WIN.set_position(gtk.WIN_POS_CENTER_ALWAYS)
		MAIN_APP_WIN.set_icon(myMAIN_ICON)
        	MAIN_APP_WIN.connect("delete_event", self.main_quit)
        	MAIN_APP_WIN.set_border_width(10)
        	MAIN_APP_WIN.set_resizable(False)

		MAIN_APP_VBOX = gtk.VBox(False, 0)
		MAIN_APP_VBOX.pack_start(MAIN_MENU_BAR, False, False, 0)
		
        	PAGES_TABLE = gtk.Table(3, 7, False)

       		# Create a new notebook, place the position of the tabs
        	PAGES_TABLE.attach(PAGES, 0,7,0,1)
        	PAGES.show()
        	PAGES.set_show_border(True)
		PAGES.set_show_tabs(False)

                MENU_SYNC_BUTTON.connect("activate", sync_button_clicked)
                MENU_COMPILE_BUTTON.connect("activate", compile_button_clicked)
		MENU_CLOSE_BUTTON.connect("activate",  self.main_quit)
		MENU_ABOUT_BUTTON.connect("activate", main_about)

        	# Main Page
        	MAIN_IMAGE = gtk.Image()
        	MAIN_IMAGE.set_from_file(myMAINIMG)
        	MAIN_PAGE_FRAME = gtk.Frame()
        	MAIN_PAGE_FRAME.set_size_request(550, 475)
        	MAIN_PAGE_FRAME.show()

		MAIN_EVENT = gtk.EventBox()
		MAIN_EVENT.add(MAIN_IMAGE)
        	MAIN_PAGE_FRAME.add(MAIN_EVENT)
		MAIN_EVENT.show()
        	PAGES.append_page(MAIN_PAGE_FRAME)
        	
        	# PACAKGES
        	PACKAGES_FRAME = gtk.Frame()
       		PACKAGES_FRAME.show()

		PACKAGES_VBOX = gtk.VBox(False, 0)
		PACKAGES_LABEL = gtk.Label()
		PACKAGES_LABEL.set_markup(package_info)
        	PACKAGES_VBOX.pack_start(PACKAGES_LABEL, True, True, 0)
        	PACKAGES_FRAME.add(PACKAGES_VBOX)
		PACKAGES_VBOX.show()
        	PAGES.append_page(PACKAGES_FRAME)

        	# Branch
        	BRANCH_FRAME = gtk.Frame()
       		BRANCH_FRAME.show()

		BRANCH_VBOX = gtk.VBox(False, 0)
        	BRANCH_LABEL = gtk.Label()
        	BRANCH_LABEL.set_markup(branch_info)
		BRANCH_RADIO = gtk.RadioButton(None, None)
		BRANCH_RADIO_ICS = gtk.RadioButton(group=BRANCH_RADIO, label="ICS")
		BRANCH_RADIO_ICS.connect("toggled", callback_branch, "ics")
		BRANCH_RADIO_ICS.show()
		BRANCH_RADIO_GB = gtk.RadioButton(group=BRANCH_RADIO, label="GB")
		BRANCH_RADIO_GB.connect("toggled", callback_branch, "gingerbread")
		BRANCH_RADIO_GB.show()
		BRANCH_RADIO_JB = gtk.RadioButton(group=BRANCH_RADIO, label="JB")
		BRANCH_RADIO_JB.connect("toggled", callback_branch, "jellybean")
		BRANCH_RADIO_JB.show()
		BRANCH_VBOX.pack_start(BRANCH_LABEL, True, True, 0)
		BRANCH_TABLE = gtk.Table(1, 3, True)
		BRANCH_TABLE.attach(BRANCH_RADIO_GB, 0, 1, 0, 1, xoptions=gtk.EXPAND)
		BRANCH_TABLE.attach(BRANCH_RADIO_ICS, 1, 2, 0, 1, xoptions=gtk.EXPAND)
		BRANCH_TABLE.attach(BRANCH_RADIO_JB, 2, 3, 0, 1, xoptions=gtk.EXPAND)
        	BRANCH_VBOX.pack_start(BRANCH_TABLE, False, False, 0)
        	BRANCH_FRAME.add(BRANCH_VBOX)
		BRANCH_VBOX.show()
        	PAGES.append_page(BRANCH_FRAME)

        	# Device
        	DEVICE_FRAME = gtk.Frame()
       		DEVICE_FRAME.show()

		DEVICE_VBOX = gtk.VBox(False, 0)
        	DEVICE_LABEL = gtk.Label()
        	DEVICE_LABEL.set_markup(device_info)
		DEVICE_BUTTON = gtk.Button("Device")
		DEVICE_BUTTON.connect("clicked", device_list)
		DEVICE_VBOX.pack_start(DEVICE_LABEL, True, True, 0)
		DEVICE_TABLE = gtk.Table(1, 1, True)
		DEVICE_TABLE.attach(DEVICE_BUTTON, 0, 1, 0, 1)
        	DEVICE_VBOX.pack_start(DEVICE_TABLE, False, False, 0)
        	DEVICE_FRAME.add(DEVICE_VBOX)
		DEVICE_VBOX.show()
        	PAGES.append_page(DEVICE_FRAME)

        	# Repo Path
        	REPO_PATH_FRAME = gtk.Frame()
       		REPO_PATH_FRAME.show()

		REPO_PATH_VBOX = gtk.VBox(False, 0)
        	REPO_PATH_LABEL = gtk.Label()
        	REPO_PATH_LABEL.set_markup(repo_info)
		REPO_PATH_BUTTON = gtk.Button("Set repo path")
		REPO_PATH_BUTTON.connect("clicked", choose_repo_path)
		REPO_PATH_VBOX.pack_start(REPO_PATH_LABEL, True, True, 0)
		REPO_PATH_TABLE = gtk.Table(1, 1, True)
		REPO_PATH_TABLE.attach(REPO_PATH_BUTTON, 0, 1, 0, 1)
        	REPO_PATH_VBOX.pack_start(REPO_PATH_TABLE, False, False, 0)
        	REPO_PATH_FRAME.add(REPO_PATH_VBOX)
		REPO_PATH_VBOX.show()
        	PAGES.append_page(REPO_PATH_FRAME)
        	
        	# Sync
        	SYNC_FRAME = gtk.Frame()
       		SYNC_FRAME.show()

		SYNC_VBOX = gtk.VBox(False, 0)
        	SYNC_LABEL = gtk.Label()
        	SYNC_LABEL.set_markup(sync_info)
		SYNC_VBOX.pack_start(SYNC_LABEL, True, True, 0)
		s = int(read_parser("sync_jobs"))
		SYNC_SCALE.set_digits(0)
		SYNC_SCALE.set_value_pos(s)
		SYNC_SCALE.set_update_policy(gtk.UPDATE_DISCONTINUOUS)
		SYNC_SCALE.connect("value-changed", sync_scale_moved)
		SYNC_SCALE.show()
		SYNC_BUTTON = gtk.Button("Sync")
		SYNC_BUTTON.connect("clicked", sync_button_clicked)
		SYNC_BUTTON.show()
		SYNC_TABLE = gtk.Table(1, 2, True)
		SYNC_TABLE.attach(SYNC_SCALE, 0, 1, 0, 1)
		SYNC_TABLE.attach(SYNC_BUTTON, 1, 2, 0, 1)
        	SYNC_VBOX.pack_start(SYNC_TABLE, False, False, 0)
        	SYNC_FRAME.add(SYNC_VBOX)
		SYNC_VBOX.show()
        	PAGES.append_page(SYNC_FRAME)
        	
        	# Compile Options
        	COMPILE_FRAME = gtk.Frame()
       		COMPILE_FRAME.show()

		COMPILE_VBOX = gtk.VBox(False, 0)
        	COMPILE_LABEL = gtk.Label()
        	COMPILE_LABEL.set_markup(compile_info)
		COMPILE_VBOX.pack_start(COMPILE_LABEL, True, True, 0)
		m = int(read_parser("make_jobs"))
		COMPILE_SCALE.set_digits(0)
		COMPILE_SCALE.set_value_pos(m)
		COMPILE_SCALE.set_update_policy(gtk.UPDATE_DISCONTINUOUS)
		COMPILE_SCALE.connect("value-changed", compile_scale_moved)
		COMPILE_SCALE.show()
		COMPILE_SCALE_LABEL = gtk.Label()
		COMPILE_SCALE_LABEL.set_markup("How many <b>make</b> jobs, Default = %s" % numprocs)
		COMPILE_SCALE_LABEL.show()
		VERIFY_BUTTON = gtk.Button("Verify")
		VERIFY_BUTTON.connect("clicked", view_config)
		COMPILE_BUTTON = gtk.Button("Compile")
		COMPILE_BUTTON.connect("clicked", compile_button_clicked)
		COMPILE_TABLE = gtk.Table(2, 1, True)
		COMPILE_TABLE.attach(COMPILE_SCALE_LABEL, 0, 1, 0, 1)
		COMPILE_TABLE.attach(COMPILE_SCALE, 1, 2, 0, 1)
		COMPILE_TABLE.attach(VERIFY_BUTTON, 0, 1, 1, 2, xpadding=20, ypadding=5)
		COMPILE_TABLE.attach(COMPILE_BUTTON, 1, 2, 1, 2, xpadding=20, ypadding=5)
        	COMPILE_VBOX.pack_start(COMPILE_TABLE, False, False, 0)
        	COMPILE_FRAME.add(COMPILE_VBOX)
		COMPILE_VBOX.show()
        	PAGES.append_page(COMPILE_FRAME)
    
        	# Set what page to start at (page 1)
        	PAGES.set_current_page(0)

		PREV_BUTTON.set_label("Click start to begin")
		PREV_BUTTON.set_size_request(150, 28)
        	PREV_BUTTON.connect("clicked", self.prev_callback)
		PREV_BUTTON.set_sensitive(False)
       		PAGES_TABLE.attach(PREV_BUTTON, 1,2,1,2, xpadding=10, ypadding=10)
		PREV_BUTTON.show()

		NEXT_BUTTON.set_label("Start")
		NEXT_BUTTON.set_size_request(150, 28)
        	NEXT_BUTTON.connect("clicked", self.next_callback)
        	PAGES_TABLE.attach(NEXT_BUTTON, 2,3,1,2, xpadding=10, ypadding=10)
        	NEXT_BUTTON.show()

                p = read_parser("repo_path")
		REPO_INFO = gtk.Label()
		REPO_INFO.set_markup("<small><small>Repo Path: <b>%s</b></small></small>" % p)
		MAIN_APP_VBOX.pack_start(REPO_INFO, False, False, 2)

		MAIN_APP_VBOX.pack_start(PAGES_TABLE, False, False, 0)

		LITHID = gtk.Label()
		LITHID.set_markup("<small><small>Built by <b><i>lithid</i></b> open and free!</small></small>")
		MAIN_APP_VBOX.pack_start(LITHID, False, False, 2)

                d = read_parser("device")
                b = read_parser("branch")
		INFO = gtk.Label()
		INFO.set_markup("<small><small>Device: <b>%s</b> Branch: <b>%s</b></small></small>" % (d, b))
		MAIN_APP_VBOX.pack_start(INFO, False, False, 2)

		MAIN_APP_WIN.add(MAIN_APP_VBOX)
		PAGES_TABLE.show()
        	MAIN_APP_WIN.show_all()

def main():
	gtk.main()
	return 0

if __name__ == "__main__":

	chk_config()
	
	if not os.path.exists(myCONF):
	        parser("branch", "ics")
	
	if not os.path.exists(askConfirm):
                get_askConfirm()

	try:
		myARG = sys.argv[1]
	except:
		myARG = "Default"

	if myARG == "-c":
		vteterminal("Compiling")
	elif myARG == "-s":
		vteterminal("Syncing")
	elif myARG == "-a":
		advanced().main()
	else:
	        c = read_parser("main_gui_toggle")
	        if c == "Advanced":
	                advanced().main()
	        else:
		        walkthrough()
		        main()

